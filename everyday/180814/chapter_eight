第8章 程序设计方法学
8.1 实例13：体育竞技分析
8.2 python程序设计思维
8.3 python第三方库安装
8.4 模块7：os库的基本使用
8.5 实例14：第三方库自动安装脚本
方法论：
-理解并掌握一批python程序设计思维
实践能力：
-学会编写更有设计感的程序
"体育竞技分析"
问题分析
体育竞技分析：模拟N场比赛
-计算思维：抽象+自动化
-模拟：抽象比赛过程+自动化执行N场比赛
-当N越大时，比赛结果分析会越科学
比赛规则：
-双人击球比赛：A&B,回合制，5局3胜
-开始时一方先发球，直到判分，接下来胜者发球
-球员只能再发球局得分，15分胜一局

自顶向下和自底向上
自顶向下
解决复杂问题的有效方法
-将一个总问题表达为若干个小问题组成的形式
-使用同样方法进一步分解小问题
如：改善居住条件-种树、盖楼
    盖楼-位置、楼设计施工-建筑工人、建筑材料、相关的组织和经理
自底向上（执行）
逐步组建复杂系统的有效测试方法
-分单元测试，逐步组装
自底向上（设计）
...->单独测试各开发模块-楼-改善居住条件

程序总体框架及步骤
-步骤1：打印程序的介绍性信息式          --printInfo()
-步骤2：获得程序运行参数：proA,proB,n   --getInputs()
-步骤3：利用球员A和B的能力值，模拟n局比赛 --simNGames()
-步骤4：获取球员A和B获胜比赛的场次及概率  --printSummary()
第一阶段：模拟一局比赛
程序执行之后要执行的步骤
def main():
    printIntro() #打印介绍信息
    probA,probB,n=getInputs() #获得用户输入的A、B球员能力值，以及模拟场次数n
    winA,winB=simNGames(n,probA,probB)  #将获得的参数作为参数输入到参数中，获得AB的比赛场次。
    printSummary(winsA,winsB) #最后打印出比赛场次
def printIntro():   #打印介绍内容，提高用户体验
    print("这个程序模拟两个选手A和B的某种竞技比赛")
    print("程序运行需要A和B的能力值（以0到1之间的小数表示）")
def getInputs(): #获得用户输入的三个参数
    a=eval("请输入选手A的能力值（0-1）:")
    b=eval("请输入选手B的能力值（0-1）:")
    n=eval("模拟比赛的场次：")
    return a,b,n  #返回元组类型对应三个输入
def printSummary(winsA,winsB):
    n=winsA+winsB
    print("竞技分析开始，共模拟{}场比赛".format(n))
    print("选手A获胜{}场比赛，占比{：0.1%}".format(winsA,winsA/n))
    print("选手B获胜{}场比赛，占比{：0.1%}".format(winsB,winsB/n))
第二阶段：步骤3：模拟N局比赛
def simNGames(n,probA,probB):
    winsA,winsB=0,0
    for i in range(n):
        scoreA,scoreB=simOneGame(probA,probB)
        if scoreA>scoreB:
            winsA+=1
        else:
            winsB+=1
    return winsA,winsB
第三阶段：判断比赛结束
def simOneGame(probA,probB):
    scoreA,scoreB=0,0
    serving="A"
    while not gameOver(scoreA,scoreB):
        if serving=="A":
            if random()<probA：
                scoreA+=1
            else:
                serving="B"
        else:
            if random()<probB:
                scoreB+=1
            else:
                serving="A"
    return socreA,scoreB
def gameOver(a,b):  #判断比赛结束
        return a==15 or b==15