Pytest目前最优秀的测试框架  nose

1.Pytest介绍
pytest是一个非常成熟的全功能的Pytest测试框架
1.简单灵活，容易上手；支持参数化；测试用例的skip和xfail处理；
2.能够支持简单的单元测试和复杂的功能测试，还可以用来做selenium/appium
  等自动化测试、接口自动化测试（pytest+requests）；
3.pytest具有很多第三方插件，并且可以自定义扩展，比较好用的如pytest-allure
 （完美html测试报告生成）pytest-xdist（多CPU分发）等；
4.可以很好的和jenkins集成；
文档：https://docs.pytest.org/en/latest/contents.html#
第三方库：https://pypi.org/search/?q=pytest

2.pytes安装，导入相关依赖库
pip install -U pytest U表示升级
pip install pytest-sugar
pip install pytest-rerunfailures
pip install pytest-xdist
pip install pytest-assume
pip install pytest-html
....
pip list查看
pytest -h 帮助
pytest --help|grep allure


3.Pytest框架结构
Import pytest
类似的setup,teardown同样更灵活，
模块级（setup_module/teardown_module）模块始末，全局的  文件级
函数级（setup_function/teardown_function）不在类中的函数有用
类级（setup_class/teardown_class）只在类中前后运行一次。
方法级（setup_method/teardown_method）运行在类中方法始末
session()会话之前之后比模块还大 跨文件级 driver

1.Pytest不同的调用方式和用例设计原则
1.Pytest/py.test（终端，命令行，pycharm都行，可配置pycharm使用pytest方法执行）
pytest -v(最高级别信息-verbose)
pytest -q 
pytest -v -s 文件名 （s是带控制台输出结果，也是输出详细）
2.pytest将在当前目录及其子目录中运行test_*.py或*_test.py形式的所有文件。
3.以test_开头的函数，以Test开头的类，以test_开头的方法。所有包package都要有__init__.py文件。
4.Pytest可以执行unittest框架写的用例和方法（不是所有的可以，会出现兼容性问题）

2.pytest-fixture灵活的方面
Fixture优势：
1.对于setup,teardown,可以不起这两个名字，所以命名方式灵活。（可以独立命名，声明后激活）
2.数据共享。在conftest.py配置里写方法可以实现数据共享，不需要import导入。可以跨文件共享
3.scope的层次及神奇的yield组合相当于各种setup和teardown

3.例子1：前端自动化中应用
场景：测试用例执行时，有的用例需要登录才能执行，有些用例不需要登录。setup和teardown无法满足。fixture
可以。默认scope(范围) function
步骤：
1.导入pytest
2.在登录的函数上面加@pytest.fixture()
3.在要使用的测试方法中传入（登录函数名称），就先登录
4.不传入的就不登录直接执行测试方法。

4.例子2: 前端自动化中应用-conftest
场景：你与其他测试工程师合作一曲开发时，公共的模块要在不同文件中，要在大家都访问到的地方。
解决：使用conftest.py这个文件进行数据共享，并且他可以放在不同位置起着不同的范围共享作用。
前提：conftest文件名是不能换的，放在项目下是全局的数据共享的地方，全局的配置和前期工作都可以
     写在这里，放在某个包下，就是这个包数据共享的地方。
执行：系统执行到参数login时先从本文件中查找是否有这个名字的变量什么的，之后在conftest.py中找到是否有。
步骤：将登陆模块带@pytest.fixture写在conftest.py

5.例子3: 前端自动化中应用-yield
场景：你已经可以将测试方法前要执行的或依赖的解决掉了，测试方法后销毁清除数据的要如何进行呢？
     范围是模块级别的。类似setupClass
解决：通过在同一模块中加入yield关键字，yield是调用第一次返回结果，第二次执行它下面的语句返回。
步骤：在@pytest.fixture(scope=module)
     在登录的方法中加yield，之后加销毁清除的步骤
@pytest.fixture(scope="module")
def open_browser():
   print('\n打开浏览器，打开百度首页')

   yield

   print('执行teardown')
   print('最后关闭浏览器')

6.fixture的自动应用
场景：不想原测试方法有任何改动，或全部都自动实现自动应用，没特例，也都不需要返回值时可以选择自动应用
解决：使用fixture中参数autouse=True实现
步骤：在方法上面加@pytest.fixture(autouse=True)
     使用@pytest.mark.usefixtures
步骤：在测试方法上加@pytest.mark.usefixtures("start")

7.fixture带参数传递
场景：测试离不开数据，为了数据灵活,一般数据都是通过参数传递的
解决：fixture通过固定参数request传递；
步骤：在fixture中增加@pytest.fixture(params=[1,2,3,'linda'])
     在方法参数写request
import pytest

@pytest.fixture(params=[1,2,3,'linda'])
def test_data(request):
    return request.param

def test_one(test_data):
    print('\ntest data:%s'%test_data)

8.mark.parameterize参数化
场景：测试数据是传入的，测试的预期结果也是传入的，二个不同的参数一一对应，
     输入的数据经过调用执行后结果是否与预期一致。
解决：使用mark中的@pytest.mark.parameterize进行参数化和数据驱动更灵活

9.参数化和数据驱动
将两者结合实现数据驱动：@pytest.mark.parametrize("login_r",test_user_data,
indirect=True)indirect=True是把login_r当做函数去执行

10.fixture传二个参数与数据驱动结合
场景：数据是从list等格式传入，或从文件读来的。传递多个参数。用户名密码多个，测试的数据多个，组合进行测试
解决：通过dict字典格式传入，如果要读每一个测试可通过['key'],这是登陆模块中的参数，测试方法中的参数是测试数据。

11.mark中的skip与xfail
场景：
    1.调试时不需运行这个用例
    2.标记无法在某些平台上运行的测试功能，
    3.当前的外部资源不可用时跳过（如果测试数据是从数据库中取到的，连接数据库的功能如果返回结果未成功就不执行跳过，因为执行也都报错）
    4.在某些版本中执行，其他版本中跳过。
解决：@pytest.mark.skip跳过这个测试用例，可以加条件skipif，在满足某些条件下才希望通过，否则跳过这个测试。
场景：
    1.功能测试尚未实施或尚未修复的错误，当测试通过时尽管预计会失败（标记pytest.mark.xfail）,它是一个xpass，将在测试摘要中报告。
    2.你希望测试由于某种情况而就应该失败

12.使用自定义标记mark只执行某部分用例
场景：只执行符合要求的某一部分用例
    可以把一个web项目划分多个模块，然后指定模块名称执行。
    App自动化时，如果想Android和IOS公用一套代码时，也可以使用标记功能，标明哪些是IOS的用例，哪些是Android的，运行代码时指定mark名称运行就可以。
解决：
    在测试用例方法上加@pytest.mark.webtest
执行：
    -s参数：输出所有测试用的print信息-m:执行自定义标记的相关用例
    pytest -s test_mark_zi_09.py
    pytest -s test_mark_zi_09.py -m=webtest
    pytest -s test_mark_zi_09.py -m apptest
    pytest -s test_mark_zi_09.py -m "not ios"

12.pytest通过文件名类名方法及组合调用部分用例执行
场景：只执行符合要求的某一部分用例，通过类与方法的命名实现。通常编写测试方法时
解决：直接输入文件名，类名
    pytest test_class_01.py
    pytest -v -s test_class_01.py
    pytest -v test_class_01.py::TestClass
    pytest -v test_class_01.py::TestClass::test_one
解决：使用-k
    pytest -k "TestClass and test_one"
    pytest -k "TestClass or test_one"
    pytest -v -k "TestClass or test_w_one" test_class_01.py
    TestClass是类名，and是运算符，还可以是and not...，test_one是方法名中含有的信息。

13.Pytest执行用例出错时停止
场景：
    正常全部执行完成后才能停止，如果想遇到错误时停止测试:-x;
    也可以当用例错误个数n达到指定数量时，停止测试:--maxfail=n
执行：
    pytest -x -v -s test_class_01.py
    pytest -x -v -s test_class_01.py --maxfail=2

13.Pytest执行-失败重新运行
场景：测试失败后要重新运行n次，要在重新运行之间添加延迟时间，间隔n秒再运行。
执行：
    安装：pip install pytest-rerunfailures
    pytest --reruns 3 -v -s test_reruns_10.py
    pytest -v --reruns 5 --reruns-delay 1

13.Pytest执行-多条断言有失败也都运行
场景：一个方法中写多条断言，通常第一条过去，下面就不执行了。我们想报错也都执行一下。
执行：安装pip install pytest-assume
    pytest.assume(1==4)
    pytest.assume(2==4)

14.多线程并行与分布式执行
场景：测试用例1000条，一个用例执行1分钟，一个参数人员执行需要1000分钟。通常我们会用人力
     成本换取时间成本，加几个人一起执行，时间就会缩短。如果10人一起执行只需要100分钟，
     这就是一种并行测试，分布式场景。
解决：pytest分布式执行插件：pytest-xdist,多个CPU或主机执行
前提：用例之间都是独立的，没有先后顺序，随机都能执行，可重复运行不影响其他用例。
安装：pip3 install pytest-xdist
    多个CPU并行执行用例，直接加-n 3是并行数量:pytest -n 3
    在多个终端下一起执行

15. pytest-html生成报告
安装：
    pip install pytest-html
生成html报告
    pytest -v -s --html=report.html--self-contained-html

